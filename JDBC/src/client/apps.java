/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import database.utilities;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Rémy
 */
public class apps extends javax.swing.JFrame {

    /**
     * Creates new form apps
     */
    public utilities util;
    public String[] logmdp;
    
    public apps() {
        try {
            initComponents();
            setLocationRelativeTo(null);
            setVisible(false);
            loginForm loginF = new loginForm(this,true);
            loginF.setVisible(true);
            logmdp = loginF.getValues();
            util = new utilities(utilities.ORACLE, logmdp[0], logmdp[1], logmdp[2], Integer.parseInt(logmdp[3]), logmdp[4]);
            connectionState.setText("Connecté à la bd");
        } catch (Exception ex) {
            Logger.getLogger(apps.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requeteLabel = new javax.swing.JLabel();
        requeteTextField = new javax.swing.JTextField();
        ScrollPanelTable = new javax.swing.JScrollPane();
        TableRequete = new javax.swing.JTable();
        BouttonDemarrer = new javax.swing.JButton();
        connectionState = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");

        requeteLabel.setText("Requete :");

        TableRequete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {}
            },
            new String [] {

            }
        ));
        TableRequete.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        ScrollPanelTable.setViewportView(TableRequete);

        BouttonDemarrer.setText("Démarrer");
        BouttonDemarrer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BouttonDemarrerMouseReleased(evt);
            }
        });

        connectionState.setText("Non connecter");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(connectionState))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(requeteLabel)
                                .addGap(18, 18, 18)
                                .addComponent(requeteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(321, 321, 321)
                                .addComponent(BouttonDemarrer)))
                        .addGap(0, 144, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ScrollPanelTable)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(connectionState)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(requeteLabel)
                        .addGap(116, 116, 116))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(requeteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BouttonDemarrer)
                        .addGap(35, 35, 35)))
                .addComponent(ScrollPanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BouttonDemarrerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BouttonDemarrerMouseReleased
        try {
            System.out.println("Requete = " + requeteTextField.getText());
            ResultSet rs;
            ResultSetMetaData rsmd;
            int rowCount,colCount, i;
            rs = util.query(requeteTextField.getText());
            
            rowCount = rs.getRow();
            rsmd = rs.getMetaData();
            colCount = rsmd.getColumnCount();
            /*for(int j = 0;j<colCount;j++)
                dtm.addColumn(rsmd.getColumnName(j));*/
            MyTableModel dtm = new MyTableModel(rs);
            while(rs.next())
            {
                Object[]  rowData = new Object[colCount];
                for(i=0; i < colCount; i++)
                {
                    rowData[i] = rs.getObject(i+1);
                    
                    //jTextArea1.setText(jTextArea1.getText()+ "\t" + rs.getObject(i+1));
                }
                //jTextArea1.setText(jTextArea1.getText()+ "\n");
                //dtm.addRow(rowData);
            }
            TableRequete.setModel(dtm);
            //dtm.fireTableDataChanged();
            System.out.println("Fin requete = ");
        } catch (SQLException ex) {
            Logger.getLogger(apps.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BouttonDemarrerMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(apps.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new apps().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BouttonDemarrer;
    private javax.swing.JScrollPane ScrollPanelTable;
    private javax.swing.JTable TableRequete;
    private javax.swing.JLabel connectionState;
    private javax.swing.JLabel requeteLabel;
    private javax.swing.JTextField requeteTextField;
    // End of variables declaration//GEN-END:variables
}

class MyTableModel extends AbstractTableModel {
        private final String[] tableHeaders;
        ResultSet rs;
        ResultSetMetaData rsmd;

        public MyTableModel(ResultSet prs){
            rs = prs;
            try {
                rsmd = rs.getMetaData();
            } catch (SQLException ex) {
                Logger.getLogger(MyTableModel.class.getName()).log(Level.SEVERE, null, ex);
            }
            tableHeaders = new String[getColumnCount()];
            for(int i = 0; i < getColumnCount(); i++)
            {
                try {
                    tableHeaders[i] = rsmd.getColumnName(i+1);
                } catch (SQLException ex) {
                    Logger.getLogger(MyTableModel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           
        }

        @Override
        public String getColumnName(int columnIndex) {
            return tableHeaders[columnIndex];
        }
 
        @Override
        public int getRowCount(){
            int ret = 0;
            try {
                ret = ( rs.last() ? rs.getRow() : 0);
            } catch (SQLException ex) {
                Logger.getLogger(MyTableModel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return ret;
        }

        @Override
        public int getColumnCount(){
            try {
                return rsmd.getColumnCount();
            } catch (SQLException ex) {
                Logger.getLogger(MyTableModel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return 0;
        }

        @Override
        public Object getValueAt(int row, int column){
            
            Object myObj = null;
            try {
                rs.absolute(row+1);
                myObj = rs.getObject(column+1);
            } catch (SQLException ex) {
                Logger.getLogger(MyTableModel.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(myObj == null)
                return "NULL";
            return myObj;
        }
}